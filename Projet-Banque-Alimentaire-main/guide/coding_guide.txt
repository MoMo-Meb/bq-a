// necessary installations
npm install
npm install express
npm install ejs
npm install axios
npm install mysql
npm install --save-dev nodemon
npm install --save-dev browser-sync
npm install jsonwebtoken
npm install mysql
npm install --save-dev jest
npm install nodemailer
npm install fs
npm install path
npm install handlebars


// add the following code to the "scripts" section of your package.json file
// to run the server and the tests.
"scripts": {
    "devStart": "nodemon server.js"
    "test": "jest"
  },

// start the server with nodemon
npm run devStart

// use case for getDataFrom function for all column
try {
  const results = await getDataFrom('users');
  res.json({ data: results });
} catch (error) {
  console.error('Error getting users:', error);
  res.status(500).json({ message: 'Internal server error' });
}

// use case for getDataFrom function with matching data
try {
  const results = await getDataFrom("users", { firstName: "john" });

  res.json({ data: results });
} catch (error) {
  console.error('Error getting users:', error);
  res.status(500).json({ message: 'Internal server error' });
}

// use case for getDataFrom function with a wanted column
try {
  const results = await getDataFrom('Particularity', 'Id, Name');
  res.json({ data: results });
} catch (error) {
  console.error('Error getting users:', error);
  res.status(500).json({ message: 'Internal server error' });
}

// use case for getDataFrom function with a custom clause
try {
  const memberId = req.params.id;
  const customWhereClause = `FIND_IN_SET(?, FamilyMembers) > 0`;
  const abonnements = await getDataFrom("abonnement", "*", customWhereClause, [memberId]);

  if (abonnements.length == 1) {
    const familyMembers = abonnements[0].FamilyMembers.split(',').map(memberId => parseInt(memberId.trim()));
    const customWhereClauseForPersonnes = `Id IN (${familyMembers.join(',')})`;
    
    const personnes = await getDataFrom("personnes", "*", customWhereClauseForPersonnes, []);
    console.log(personnes);
    res.render("details_familles_id", { personnes : personnes });
  }
} catch (error) {
  console.error('Error:', error);
  res.status(500).json({ message: 'Internal server error' });
}



// use case for checkExistFrom function
  try {
    const exists = await db_utilities.checkExistFrom('particularity', { name: 'senior' });
    if (exists) {
      res.json({ message: 'Data found' });
    } else {
      res.status(404).json({ message: 'Data not found' });
    }
  } catch (error) {
    console.error('Error checking for user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
  
  
// use case for checkExistFrom function with multiple condtions
  try {
    const conditions = {
      Name: "Main Office",
      Location: "123 Main St."
    };
    const exists = await db_utilities.checkExistFrom("officeinfo", conditions);

    if (exists) {
      res.json({ message: 'Data found' });
    } else {
      res.status(404).json({ message: 'Data not found' });
    }
  } catch (error) {
    console.error('Error checking for user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }



  // use case for updateFrom function
  const updateValues = { firstName: "Omar", lastName: "Omar" };
  const queryCondition = { id: 4 };
  try {
      const updated = await db_utilities.updateFrom("users", updateValues, queryCondition);
      if (updated) {
          res.json({ message: "User updated successfully" });
      } else {
          res.json({ message: "User not found" });
      }
  } catch (error) {
      console.error("Error updating user:", error);
      res.status(500).json({ message: "Internal server error" });
  }




  // use case for deleteFrom function
  const queryCondition = { id: 4, firstName: "Bob", lastName: "Smith" };
  try {
      const deleted = await db_utilities.deleteFrom("users", queryCondition);
      if (deleted) {
          res.json({ message: "User deleted successfully" });
      } else {
          res.json({ message: "User not found" });
      }
  } catch (error) {
      console.error("Error deleting user:", error);
      res.status(500).json({ message: "Internal server error" });
  }


  // use case for insertInto function
  const data = { FirstName: 'Omar', LastName: 'Ramo', Telephone: '123-456-7890', Email: 'omar@omar.com', Password: 'password-omar' };
  try {
    const inserted = await db_utilities.insertInto('users', data);
    if (inserted) {
      res.json({ message: 'Data inserted successfully' });
    } else {
      res.json({ message: 'Data not inserted' });
    }
  } catch (error) {
    console.error('Error inserting data:', error);
    res.status(500).json({ message: 'Internal server error' });
  }